@page "/tool"
@page "/tool/{slug}"

@using CodeWF.Pages.Tool.Converter
@using CodeWF.Pages.Tool.Web
@inherits BaseComponent
@inject IOptions<SiteOption> SiteOptions
@inject AppService AppService

<PageTitle>@model?.Name - @SiteOptions.Value.AppTitle</PageTitle>

<UMenuBar Target="cl-doc-menu"/>
<div class="container cl-container cl-doc">
    <UToolMenu/>
    <CmsCard>
        <HeadTemplate>
            <WechatPublicLink/>
            @if (!string.IsNullOrWhiteSpace(model?.Repository))
            {
                <div class="count">
                    <i class="far fa-eye"/>
                    <a href="@model?.Repository" target="_blank">看看Github上的源码</a>
                </div>
            }
        </HeadTemplate>
        <ChildContent>
            @if (model == null)
            {
                <a href="/tool/@SlugifyString.Slug">@AppService.GetToolItem(SlugifyString.Slug)?.Name</a>
            }
            else
            {
                @if (string.Equals(Slug, SlugifyString.Slug, StringComparison.OrdinalIgnoreCase))
                {
                    <SlugifyString/>
                }

                @if (string.Equals(Slug, IconConverter.Slug, StringComparison.OrdinalIgnoreCase))
                {
                    <IconConverter/>
                }

                @if (string.Equals(Slug, Timestamp.Slug, StringComparison.OrdinalIgnoreCase))
                {
                    <Timestamp/>
                }

                @if (string.Equals(Slug, NuoChe.Slug, StringComparison.OrdinalIgnoreCase))
                {
                    <NuoChe/>
                }
            }
        </ChildContent>
    </CmsCard>
</div>

@code {
    private ToolItem? model;

    [Parameter] public string? Slug { get; set; }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        model = AppService.GetToolItem(Slug);
    }

}